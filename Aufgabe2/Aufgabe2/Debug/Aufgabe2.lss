
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000806  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <led_on>:
{
	//PORTD.bit(led) = 1
	
	//PORTD ^= (1 << PD(led));
	
	if(led == 0){PORTD = (1 << PD5);}
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	19 f4       	brne	.+6      	; 0x8a <led_on+0xa>
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret
	else if(led == 1){PORTD = (1 << PD6);}
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	91 05       	cpc	r25, r1
  8e:	19 f4       	brne	.+6      	; 0x96 <led_on+0x16>
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	8b b9       	out	0x0b, r24	; 11
  94:	08 95       	ret
	else if(led == 2){PORTD = (1 << PD7);}
  96:	02 97       	sbiw	r24, 0x02	; 2
  98:	11 f4       	brne	.+4      	; 0x9e <led_on+0x1e>
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	8b b9       	out	0x0b, r24	; 11
  9e:	08 95       	ret

000000a0 <led_off>:
{
	//PORTD.bit(led) = 0
	
	//PORTD ^= (0 << PD(led));
	
	if(led == 2){PORTD = (0 << PD7);}
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <led_off+0xa>
  a6:	1b b8       	out	0x0b, r1	; 11
  a8:	08 95       	ret
	else if(led == 1){PORTD = (0 << PD6);}
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <led_off+0x14>
  b0:	1b b8       	out	0x0b, r1	; 11
  b2:	08 95       	ret
	else if(led == 0){PORTD = (0 << PD5);}
  b4:	89 2b       	or	r24, r25
  b6:	09 f4       	brne	.+2      	; 0xba <led_off+0x1a>
  b8:	1b b8       	out	0x0b, r1	; 11
  ba:	08 95       	ret

000000bc <main>:
void led_off(int led);
void led_on (int led);

int main (void) //20min
{
	DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	80 6e       	ori	r24, 0xE0	; 224
  c0:	8a b9       	out	0x0a, r24	; 10
	{
		//PORTB ^= (1 << PB0);
		//_delay_ms(200);
		
		int i;
		for(i = 0; i < 3; i++)
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
		{
			led_on(i);
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x16>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x20>
  dc:	00 00       	nop
			_delay_ms(200);
			led_off(i);
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 50 00 	call	0xa0	; 0xa0 <led_off>
	{
		//PORTB ^= (1 << PB0);
		//_delay_ms(200);
		
		int i;
		for(i = 0; i < 3; i++)
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	c3 30       	cpi	r28, 0x03	; 3
  e8:	d1 05       	cpc	r29, r1
  ea:	69 f7       	brne	.-38     	; 0xc6 <main+0xa>
		
		//i = 2;
		
		for(i = 1; i > 0; i--)
		{
			led_on(i);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	83 ec       	ldi	r24, 0xC3	; 195
  f8:	99 e0       	ldi	r25, 0x09	; 9
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x3e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x48>
 104:	00 00       	nop
			_delay_ms(200);
			led_off(i);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 50 00 	call	0xa0	; 0xa0 <led_off>
 10e:	d9 cf       	rjmp	.-78     	; 0xc2 <main+0x6>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
