
Aufgabe3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b2  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000573  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000303  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033c  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	3c d0       	rcall	.+120    	; 0xbc <main>
  44:	62 c0       	rjmp	.+196    	; 0x10a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <init>:
int led_red = 0;
int led_yellow = 0;

void init()
{
	DDRD |= (0 << PD2) | (0 << PD3);
  48:	81 b3       	in	r24, 0x11	; 17
  4a:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2) | (1 << PD3);
  4c:	82 b3       	in	r24, 0x12	; 18
  4e:	8c 60       	ori	r24, 0x0C	; 12
  50:	82 bb       	out	0x12, r24	; 18
	DDRB |= (1<< PB0) | (1 << PB1);
  52:	87 b3       	in	r24, 0x17	; 23
  54:	83 60       	ori	r24, 0x03	; 3
  56:	87 bb       	out	0x17, r24	; 23
  58:	08 95       	ret

0000005a <RedPressed>:
}

void RedPressed()
{
	if (led_red == 1)
  5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_red>
  5e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_red+0x1>
  62:	01 97       	sbiw	r24, 0x01	; 1
  64:	29 f4       	brne	.+10     	; 0x70 <RedPressed+0x16>
	{
		led_red = 0;
  66:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <led_red+0x1>
  6a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_red>
  6e:	06 c0       	rjmp	.+12     	; 0x7c <RedPressed+0x22>
	}
	else 
	{
		led_red = 1;
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <led_red+0x1>
  78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led_red>
	}
	led_yellow = 0;
  7c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  84:	08 95       	ret

00000086 <YellowPressed>:
	
}

void YellowPressed()
{
	if (led_yellow == 1)
  86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	29 f4       	brne	.+10     	; 0x9c <YellowPressed+0x16>
	{
		led_yellow = 0;
  92:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  96:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <YellowPressed+0x22>
	}
	else
	{
		led_yellow = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	led_red = 0;
  a8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <led_red+0x1>
  ac:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_red>
  b0:	08 95       	ret

000000b2 <polling>:



void polling()
{
		if (~PIND & (1 << PD2))
  b2:	82 9b       	sbis	0x10, 2	; 16
		{
			RedPressed();
  b4:	d2 df       	rcall	.-92     	; 0x5a <RedPressed>
		}

		if (~PIND & (1 << PD3))
  b6:	83 9b       	sbis	0x10, 3	; 16
		{
			YellowPressed();
  b8:	e6 df       	rcall	.-52     	; 0x86 <YellowPressed>
  ba:	08 95       	ret

000000bc <main>:


int main(void)

{
	init();
  bc:	c5 df       	rcall	.-118    	; 0x48 <init>
	
		polling();
		
		if (led_red == 1)
		{
			PORTB = (1 << PB0);
  be:	d1 e0       	ldi	r29, 0x01	; 1
			
		}

		if (led_yellow == 1)
		{
			PORTB = (1 << PB1);
  c0:	c2 e0       	ldi	r28, 0x02	; 2
{
	init();
    while (1) 
    {
	
		polling();
  c2:	f7 df       	rcall	.-18     	; 0xb2 <polling>
		
		if (led_red == 1)
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_red>
  c8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_red+0x1>
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	41 f4       	brne	.+16     	; 0xe0 <main+0x24>
		{
			PORTB = (1 << PB0);
  d0:	d8 bb       	out	0x18, r29	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e4       	ldi	r24, 0x4F	; 79
  d4:	93 ec       	ldi	r25, 0xC3	; 195
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x1a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x20>
  dc:	00 00       	nop
			_delay_ms(200);
			PORTB = (0 << PB0);
  de:	18 ba       	out	0x18, r1	; 24
			
		}

		if (led_yellow == 1)
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	41 f4       	brne	.+16     	; 0xfc <main+0x40>
		{
			PORTB = (1 << PB1);
  ec:	c8 bb       	out	0x18, r28	; 24
  ee:	8f e4       	ldi	r24, 0x4F	; 79
  f0:	93 ec       	ldi	r25, 0xC3	; 195
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x36>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x3c>
  f8:	00 00       	nop
			_delay_ms(200);
			PORTB = (0 << PB1);
  fa:	18 ba       	out	0x18, r1	; 24
  fc:	8f e4       	ldi	r24, 0x4F	; 79
  fe:	93 ec       	ldi	r25, 0xC3	; 195
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x44>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x4a>
 106:	00 00       	nop
 108:	dc cf       	rjmp	.-72     	; 0xc2 <main+0x6>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
