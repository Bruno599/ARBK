
Aufgabe3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000852  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033e  00000000  00000000  000011d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b8  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  88:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
int led_1 = 0;
int led_2 = 0;

void init()
{
	DDRD |= (0 << PD2) | (0 << PD3);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2) | (1 << PD3);
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	8c 60       	ori	r24, 0x0C	; 12
  98:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1<< PB0) | (1 << PB1);
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	84 b9       	out	0x04, r24	; 4
  a0:	08 95       	ret

000000a2 <polling>:

int polling()
{
	while(1) //(PIND2 == 1 && PIND3 == 1)
	{
		if (~PIND & (1 << PD2))
  a2:	4a 9b       	sbis	0x09, 2	; 9
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <polling+0xe>
		{
			return 0;
		}
		if (~PIND & (1 << PD3))
  a6:	4b 99       	sbic	0x09, 3	; 9
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <polling>
		{
			return 1;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret
{
	while(1) //(PIND2 == 1 && PIND3 == 1)
	{
		if (~PIND & (1 << PD2))
		{
			return 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
		{
			return 1;
		}
	}
	
}
  b4:	08 95       	ret

000000b6 <switch_led_1>:
void switch_led_1()
{
	if(led_1 == 0)
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_1>
  ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_1+0x1>
  be:	89 2b       	or	r24, r25
  c0:	59 f4       	brne	.+22     	; 0xd8 <switch_led_1+0x22>
	{
		led_1 = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <led_1+0x1>
  ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <led_1>
		//PORTB |= (1 << PB0);
		led_2 = 0;
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d6:	08 95       	ret
		//PORTB &= (0 << PB1);
		
	}
	else
	{
		led_1 = 0;
  d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <led_1+0x1>
  dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <led_1>
  e0:	08 95       	ret

000000e2 <switch_led_2>:
	
	};
	
void switch_led_2()
{
	if(led_2 == 0)
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ea:	89 2b       	or	r24, r25
  ec:	59 f4       	brne	.+22     	; 0x104 <switch_led_2+0x22>
	{
		led_2 = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		//PORTB |= (1 << PB1);
		led_1 = 0;
  fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <led_1+0x1>
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <led_1>
 102:	08 95       	ret
		//PORTB &= (0 << PB0);
	}
	else
	{
		led_2 = 0;
 104:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 108:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 10c:	08 95       	ret

0000010e <main>:
	


int main(void)
{
	init();
 10e:	0e 94 48 00 	call	0x90	; 0x90 <init>
    while (1) 
    {
		if (polling() == 0)
 112:	0e 94 51 00 	call	0xa2	; 0xa2 <polling>
 116:	89 2b       	or	r24, r25
 118:	19 f4       	brne	.+6      	; 0x120 <main+0x12>
		{
			switch_led_1();
 11a:	0e 94 5b 00 	call	0xb6	; 0xb6 <switch_led_1>
 11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x16>
		}
		else
		{
			switch_led_2();
 120:	0e 94 71 00 	call	0xe2	; 0xe2 <switch_led_2>
		}
		
		
		if (led_1 == 1)
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <led_1>
 128:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <led_1+0x1>
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	a9 f4       	brne	.+42     	; 0x15a <main+0x4c>
		{
			PORTB |= (1 << PB0);
 130:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x2a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x34>
 142:	00 00       	nop
			_delay_ms(100);
			PORTB |= (0 << PB0);
 144:	85 b1       	in	r24, 0x05	; 5
 146:	85 b9       	out	0x05, r24	; 5
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	81 ee       	ldi	r24, 0xE1	; 225
 14c:	94 e0       	ldi	r25, 0x04	; 4
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x40>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x4a>
 158:	00 00       	nop
			_delay_ms(100);
		}
		
		if (led_2 == 1)
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	b1 f6       	brne	.-84     	; 0x112 <main+0x4>
		{
			PORTB |= (1 << PB1);
 166:	29 9a       	sbi	0x05, 1	; 5
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	81 ee       	ldi	r24, 0xE1	; 225
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x60>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x6a>
 178:	00 00       	nop
			_delay_ms(100);
			PORTB |= (0 << PB1);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	81 ee       	ldi	r24, 0xE1	; 225
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x76>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x80>
 18e:	00 00       	nop
 190:	c0 cf       	rjmp	.-128    	; 0x112 <main+0x4>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
