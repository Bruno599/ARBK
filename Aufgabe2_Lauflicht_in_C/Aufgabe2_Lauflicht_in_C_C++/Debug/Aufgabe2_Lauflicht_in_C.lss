
Aufgabe2_Lauflicht_in_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074d  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000498  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006cfc  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000820a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000021f  00000000  00000000  0000822a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	20 d0       	rcall	.+64     	; 0xb6 <main>
  76:	33 c0       	rjmp	.+102    	; 0xde <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <led_on>:
{
	//PORTD.bit(led) = 1
	
	//PORTD ^= (1 << PD(led));
	
	if(led == 0){PORTD = (1 << PD3);}
  7a:	00 97       	sbiw	r24, 0x00	; 0
  7c:	19 f4       	brne	.+6      	; 0x84 <led_on+0xa>
  7e:	88 e0       	ldi	r24, 0x08	; 8
  80:	8b b9       	out	0x0b, r24	; 11
  82:	08 95       	ret
	else if(led == 1){PORTD = (1 << PD4);}
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	91 05       	cpc	r25, r1
  88:	19 f4       	brne	.+6      	; 0x90 <led_on+0x16>
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	8b b9       	out	0x0b, r24	; 11
  8e:	08 95       	ret
	else if(led == 2){PORTD = (1 << PD5);}
  90:	02 97       	sbiw	r24, 0x02	; 2
  92:	11 f4       	brne	.+4      	; 0x98 <led_on+0x1e>
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	8b b9       	out	0x0b, r24	; 11
  98:	08 95       	ret

0000009a <led_off>:
{
	//PORTD.bit(led) = 0
	
	//PORTD ^= (0 << PD(led));
	
	if(led == 2){PORTD = (0 << PD5);}
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
  9e:	11 f4       	brne	.+4      	; 0xa4 <led_off+0xa>
  a0:	1b b8       	out	0x0b, r1	; 11
  a2:	08 95       	ret
	else if(led == 1){PORTD = (0 << PD4);}
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	91 05       	cpc	r25, r1
  a8:	11 f4       	brne	.+4      	; 0xae <led_off+0x14>
  aa:	1b b8       	out	0x0b, r1	; 11
  ac:	08 95       	ret
	else if(led == 0){PORTD = (0 << PD3);}
  ae:	89 2b       	or	r24, r25
  b0:	09 f4       	brne	.+2      	; 0xb4 <led_off+0x1a>
  b2:	1b b8       	out	0x0b, r1	; 11
  b4:	08 95       	ret

000000b6 <main>:
void led_off(int led);
void led_on (int led);

int main (void)
{
	DDRD |= (1 << PD3 | 1 << PD4 | 1 << PD5);
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	88 63       	ori	r24, 0x38	; 56
  ba:	8a b9       	out	0x0a, r24	; 10
	{
		//PORTB ^= (1 << PB0);
		//_delay_ms(200);
		
		int i;
		for(i = 0; i < 3; i++)
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
		{
			led_on(i);
  c0:	ce 01       	movw	r24, r28
  c2:	db df       	rcall	.-74     	; 0x7a <led_on>
			//_delay_ms(200);
			led_off(i);
  c4:	ce 01       	movw	r24, r28
  c6:	e9 df       	rcall	.-46     	; 0x9a <led_off>
	{
		//PORTB ^= (1 << PB0);
		//_delay_ms(200);
		
		int i;
		for(i = 0; i < 3; i++)
  c8:	21 96       	adiw	r28, 0x01	; 1
  ca:	c3 30       	cpi	r28, 0x03	; 3
  cc:	d1 05       	cpc	r29, r1
  ce:	c1 f7       	brne	.-16     	; 0xc0 <main+0xa>
		
		//i = 2;
		
		for(i = 1; i > 0; i--)
		{
			led_on(i);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	d2 df       	rcall	.-92     	; 0x7a <led_on>
			//_delay_ms(200);
			led_off(i);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	df df       	rcall	.-66     	; 0x9a <led_off>
  dc:	ef cf       	rjmp	.-34     	; 0xbc <main+0x6>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
