
aufgabe3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a8  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058b  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000303  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000347  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	7e c0       	rjmp	.+252    	; 0x100 <__vector_1>
   4:	a0 c0       	rjmp	.+320    	; 0x146 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	2e d0       	rcall	.+92     	; 0xa0 <main>
  44:	a3 c0       	rjmp	.+326    	; 0x18c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <RedPressed>:
volatile int led_red = 0;
volatile int led_yellow = 0;
	
void RedPressed()
{
	if (led_red == 1)
  48:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_red>
  4c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_red+0x1>
  50:	01 97       	sbiw	r24, 0x01	; 1
  52:	29 f4       	brne	.+10     	; 0x5e <RedPressed+0x16>
	{
		led_red = 0;
  54:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <led_red+0x1>
  58:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_red>
  5c:	06 c0       	rjmp	.+12     	; 0x6a <RedPressed+0x22>
	}
	else 
	{
		led_red = 1;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <led_red+0x1>
  66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <led_red>
	}
	led_yellow = 0;
  6a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  6e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  72:	08 95       	ret

00000074 <YellowPressed>:
	
}

void YellowPressed()
{
	if (led_yellow == 1)
  74:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  78:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	29 f4       	brne	.+10     	; 0x8a <YellowPressed+0x16>
	{
		led_yellow = 0;
  80:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  84:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  88:	06 c0       	rjmp	.+12     	; 0x96 <YellowPressed+0x22>
	}
	else
	{
		led_yellow = 1;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	led_red = 0;
  96:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <led_red+0x1>
  9a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <led_red>
  9e:	08 95       	ret

000000a0 <main>:
	
}

int main(void)
{
	DDRB |= (1 << PB0 ) | (1 << PB1);
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	83 60       	ori	r24, 0x03	; 3
  a4:	87 bb       	out	0x17, r24	; 23
	PORTD |= (1 << PD2) | (1 << PD3);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8c 60       	ori	r24, 0x0C	; 12
  aa:	82 bb       	out	0x12, r24	; 18
	
	GICR = (1 << INT0) | (1 << INT1); //Global INterrupt Controll 
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (0<<ISC00) | (1 << ISC01) | (0<<ISC10) | (0<<ISC11); //Pruefe auf fallende Flanke
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	85 bf       	out	0x35, r24	; 53
	sei();
  b4:	78 94       	sei
	
    while (1) 
    {
		if(led_red == 1)
		{
			PORTB = (1 << PB0);
  b6:	31 e0       	ldi	r19, 0x01	; 1
			PORTB = (0 << PB0);
		}
		
		if(led_yellow == 1)
		{
			PORTB = (1 << PB1);
  b8:	22 e0       	ldi	r18, 0x02	; 2
	MCUCR = (0<<ISC00) | (1 << ISC01) | (0<<ISC10) | (0<<ISC11); //Pruefe auf fallende Flanke
	sei();
	
    while (1) 
    {
		if(led_red == 1)
  ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led_red>
  be:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led_red+0x1>
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	41 f4       	brne	.+16     	; 0xd6 <main+0x36>
		{
			PORTB = (1 << PB0);
  c6:	38 bb       	out	0x18, r19	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x2c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x32>
  d2:	00 00       	nop
			_delay_ms(200);
			PORTB = (0 << PB0);
  d4:	18 ba       	out	0x18, r1	; 24
		}
		
		if(led_yellow == 1)
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	41 f4       	brne	.+16     	; 0xf2 <main+0x52>
		{
			PORTB = (1 << PB1);
  e2:	28 bb       	out	0x18, r18	; 24
  e4:	8f e4       	ldi	r24, 0x4F	; 79
  e6:	93 ec       	ldi	r25, 0xC3	; 195
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x48>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x4e>
  ee:	00 00       	nop
			_delay_ms(200);
			PORTB = (0 << PB1);
  f0:	18 ba       	out	0x18, r1	; 24
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	93 ec       	ldi	r25, 0xC3	; 195
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x56>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x5c>
  fc:	00 00       	nop
  fe:	dd cf       	rjmp	.-70     	; 0xba <main+0x1a>

00000100 <__vector_1>:
		_delay_ms(200);
    }
}

ISR(INT0_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
	RedPressed();
 122:	92 df       	rcall	.-220    	; 0x48 <RedPressed>
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_2>:

ISR (INT1_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
	YellowPressed();
 168:	85 df       	rcall	.-246    	; 0x74 <YellowPressed>
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
